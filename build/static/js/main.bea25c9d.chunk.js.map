{"version":3,"sources":["logo.svg","components/Page/index.js","containers/Page/index.js","graphql/LandingQuery.js","components/GridItem/index.js","components/Hero/index.js","components/Landing/index.js","routes/index.js","containers/Landing/index.js","components/NotFound/index.js","components/Menu/index.js","containers/MenuContainer.js","components/Layout/index.js","App.js","serviceWorker.js","links.js","clients.js","index.js"],"names":["module","exports","__webpack_require__","p","Page","props","loading","react_default","a","createElement","data","route","nodeContext","body","value","ContentByPath","gql","_templateObject","graphql","options","console","log","variables","path","location","pathname","LandingByPath","LandingQuery_templateObject","Item","styled","div","GridItem_templateObject","GridItem","_ref","title","image","url","src","alt","HeroContainer","Hero_templateObject","Image","img","_templateObject2","Hero","bgImage","ctaLink","href","GridContainer","Landing_templateObject","LandingContent","fieldDynamicContent","map","content","entity","entityBundle","components_Hero","fieldTitle","fieldBackgro","fieldCtaLink","fieldContentReference","components_GridItem","fieldImage","routes","name","exact","component","Fragment","NavBar","nav","Menu_templateObject","Menu","Link","Menu_templateObject2","error","menuByName","links","link","to","label","MENU_QUERY","MenuContainer_templateObject","Layout","MenuContainer","Switch","Route","Component","Boolean","window","hostname","match","errorLink","onError","graphQLErrors","networkError","_ref2","message","concat","clientQueryLink","HttpLink","uri","credentials","client","ApolloClient","ApolloLink","from","connectToDevTools","cache","InMemoryCache","restore","__APOLLO_STATE__","hydrate","react_apollo_browser_umd","BrowserRouter","components_Layout","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.bea25c9d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react'\n\nconst Page = (props) => {\n  if (props.loading) return <p>Loading</p>\n\n  return (<main>\n    {props && props.data && props.data.route && props.data.route.nodeContext && props.data.route.nodeContext.body.value}\n  </main>)\n}\n\nexport default Page\n","import gql from 'graphql-tag'\nimport { graphql } from 'react-apollo'\n\nimport Page from '../../components/Page'\n\nconst ContentByPath = gql`\n  query getNodeByPath($path: String!) {\n   route(path: $path) {\n     ...on InternalUrl {\n       path\n       nodeContext {\n         ...on NodePage {\n           nid\n           title\n           body {\n             value\n           }\n         }\n       }\n     }\n   }\n  }\n`\n\nexport default graphql(ContentByPath, {\n  options: (props) => { console.log('[props]: ', props); return ({ variables: { path: props.location.pathname } }) }\n})(Page)\n","import gql from 'graphql-tag'\n\nconst LandingByPath = gql`\n  query {\n    route(path: \"/cases\") {\n      ... on InternalUrl {\n        path\n        nodeContext {\n          type {\n            targetId\n          }\n          ...on NodeLanding {\n            title\n            fieldDynamicContent {\n              entity {\n                entityBundle\n                ... on ParagraphHeroBlock {\n                   fieldCtaLink {\n                    url {\n                      path\n                    }\n                    title\n                  }\n                   fieldBackgro {\n                    targetId\n                    alt\n                    url\n                  }\n                  fieldTitle {\n                    value\n                  }\n                }\n              ...on ParagraphContentList {\n                fieldContentReference {\n                  entity {\n                    ... on NodeCase {\n                      title\n                      fieldImage {\n                        url\n                        alt\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n`\n\nexport default LandingByPath\n","import React from 'react'\nimport styled from 'styled-components'\n\nconst Item = styled.div`\nposition: relative;\n  background-color: #f6f6f6;\n  padding: 20px;\n\n  h3 {\n    position: absolute;\n    top: 50%;\n    transform: translateY(-50%);\n  }\n`\nconst GridItem = ({ title, image }) => (\n  <Item>\n    <h3>{title}</h3>\n    {image.url &&\n      <img src=\"fieldImage.url\" alt={image.alt} />\n    }\n  </Item>\n)\n\nexport default GridItem\n","import React from 'react'\nimport styled from 'styled-components'\nimport PropTypes from 'prop-types'\n\nconst propTypes = {\n  title: PropTypes.string.isRequired,\n  bgImage: PropTypes.object.isRequired,\n  ctaLink: PropTypes.object.isRequired\n}\n\nconst HeroContainer = styled.div`\n  position: relative;\n`\nconst Image = styled.img`\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  width: 100%;\n`\n\nconst Hero = ({ title, bgImage, ctaLink }) => (\n  <HeroContainer>\n    <Image src={bgImage.url} alt={bgImage.alt} />\n    />\n     <h2>{title}</h2>\n    <a href={ctaLink.url.path}>{ctaLink.title}</a>\n  </HeroContainer>\n)\n\nHero.propTypes = propTypes\n\nexport default Hero\n","import React from 'react'\nimport GridItem from '../GridItem'\nimport Hero from '../Hero'\nimport styled from 'styled-components'\n\nconst GridContainer = styled.div`\n  display: flex;\n`\n\nconst LandingContent = (props) => {\n  if (props.loading) return <p>Loading</p>\n\n  console.log('data', props.data)\n\n  return (<main>\n    {props && props.data && props.data.route && props.data.route.nodeContext && props.data.route.nodeContext.fieldDynamicContent.map(content => {\n      console.log('[bundle]', content.entity.entityBundle)\n      const { entity } = content\n      switch (entity.entityBundle) {\n\n        case 'hero_block':\n          return <Hero\n            title={entity.fieldTitle.value}\n            bgImage={entity.fieldBackgro}\n            ctaLink={entity.fieldCtaLink}\n          />//content.entity.fieldCtaLink.title\n        case 'content_list':\n          return (\n            <GridContainer>\n              {content.entity.fieldContentReference.map(content =>\n                <GridItem\n                  title={content.entity.title}\n                  image={content.entity.fieldImage}\n                />\n              )}\n            </GridContainer>\n          )\n        default:\n          return 'no paragraph content'\n      }\n    })}\n\n  </main>)\n}\n\nexport default LandingContent\n","import Page from '../containers/Page'\nimport Landing from '../containers/Landing'\nimport NotFound from '../components/NotFound'\n\nconst routes = [\n  {\n    path: '/',\n    name: 'home',\n    exact: true,\n    component: Page\n  },\n  {\n    path: '/about',\n    name: 'about',\n    component: Page\n  },\n  {\n    path: '/cases',\n    name: 'cases',\n    component: Landing\n  },\n  {\n    path: '*',\n    name: 'notfound',\n    component: NotFound\n  }\n]\n\nexport default routes\n","import { graphql } from 'react-apollo'\n\nimport LandingByPath from '../../graphql/LandingQuery'\n\nimport LandingContent from '../../components/Landing'\n\nexport default graphql(LandingByPath, {\n  options: (props) => { console.log('[props]: ', props); return ({ variables: { path: props.location.pathname } }) }\n})(LandingContent)\n","import React from 'react'\n\nconst NotFound = () =>\n  <>\n    <h2>404</h2>\n    <p>Page not found</p>\n  </>\n\nexport default NotFound\n","import React from 'react'\nimport { Link } from 'react-router-dom'\n\nimport styled from 'styled-components'\n\nconst NavBar = styled.nav`\n ul {\n   display: flex;\n   list-style-type: none;\n }\n`\nconst StyledLink = styled(Link)`\n  \n`\n\nconst Menu = ({ data }) => {\n  if (data.error) return <p>Menu error: {data.error}</p>\n  return (\n    <NavBar>\n      <ul>\n        {data && data.menuByName && data.menuByName.links.map(link => <li>\n          <Link to={link.url.path}>{link.label}</Link>\n        </li>)}\n      </ul>\n    </NavBar>\n  )\n}\n\nexport default Menu\n","import { graphql } from 'react-apollo';\nimport gql from 'graphql-tag'\n\nimport Menu from '../components/Menu'\n\nconst MENU_QUERY = gql`\nquery getMenu {\n  menuByName(name: \"main\") {\n  links {\n    label\n    url {\n      path\n    }\n  }\n}\n}\n`;\n\nexport default graphql(MENU_QUERY)(Menu)\n","import { Route, Switch } from 'react-router'\nimport React from 'react'\n\nimport routes from '../../routes'\n\nimport MenuContainer from '../../containers/MenuContainer'\n\nconst Layout = () =>\n<div>\n<MenuContainer />\n\n<Switch>\n{routes.map(route => <Route {...route} />)}\n</Switch>\n</div>\n\nexport default Layout\n","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <p>\n            Edit <code>src/App.js</code> and save to reload.\n          </p>\n          <a\n            className=\"App-link\"\n            href=\"https://reactjs.org\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Learn React\n          </a>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { onError } from 'apollo-link-error';\nimport { HttpLink } from 'apollo-link-http'; \n\nexport const errorLink = onError(({ graphQLErrors, networkError}) => {\n  if (graphQLErrors) {\n    graphQLErrors.map(({ message, location, path }) => {\n      console.log(`[GraphQL error]: Message: ${message}, Location: ${location}, Path: ${path}`)\n    })\n  }\n  if (networkError) console.log(`[Network error]: ${networkError}`);\n})\n\nexport const queryLink = new HttpLink({\n  uri: 'http://drupal/graphql',\n  credentials: 'same-origin',\n});\n","import ApolloClient from \"apollo-client\";\nimport { ApolloLink } from \"apollo-link\";\nimport { HttpLink } from 'apollo-link-http'; \nimport { InMemoryCache } from \"apollo-cache-inmemory\";\nimport { errorLink, queryLink } from './links';\n\n\nconst clientQueryLink = new HttpLink({\n  uri: 'http://localhost:7025/graphql',\n  credentials: 'same-origin',\n})\n\nexport const client = new ApolloClient({\n  link: ApolloLink.from([errorLink, clientQueryLink ]),\n  connectToDevTools: true,\n  cache: new InMemoryCache().restore(window.__APOLLO_STATE__)\n});\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Layout from './components/Layout';\nimport App from './App';\nimport { hydrate } from 'react-dom'\nimport { ApolloProvider } from 'react-apollo';\nimport { BrowserRouter } from 'react-router-dom'\nimport * as serviceWorker from './serviceWorker';\n\nimport { client } from './clients'\n\nhydrate(\n<ApolloProvider client={client}>\n  <BrowserRouter>\n    <Layout />\n  </BrowserRouter>\n</ApolloProvider>\n, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n\n"],"sourceRoot":""}